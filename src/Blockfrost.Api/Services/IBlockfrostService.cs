using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;

namespace Blockfrost.Api
{
    public interface IBlockfrostService
    {
        string BaseUrl { get; set; }
        bool ReadResponseAsString { get; set; }

        Task<AccountContent> GetAccountsAsync(string stake_address);
        Task<AccountContent> GetAccountsAsync(string stake_address, CancellationToken cancellationToken);
        Task<IpfsPinAddResponse> PostAddPinAsync(string iPFS_path);
        Task<IpfsPinAddResponse> PostPinAsync(string iPFS_path, CancellationToken cancellationToken);
        Task<IpfsAddResponse> AddAsync();
        Task<IpfsAddResponse> AddAsync(CancellationToken cancellationToken);
        Task<ICollection<AssetAddressesResponse>> AddressesAll2Async(string asset, int? count, int? page, SortOrder? order);
        Task<ICollection<AssetAddressesResponse>> AddressesAll2Async(string asset, int? count, int? page, SortOrder? order, CancellationToken cancellationToken);
        Task<ICollection<StakeAddressesAddressesResponse>> AddressesAllAsync(string stake_address, int? count, int? page, SortOrder? order);
        Task<ICollection<StakeAddressesAddressesResponse>> AddressesAllAsync(string stake_address, int? count, int? page, SortOrder? order, CancellationToken cancellationToken);
        Task<AddressResponse> AddressesAsync(string address);
        Task<AddressResponse> AddressesAsync(string address, CancellationToken cancellationToken);
        Task<AnonymousResponse> AnonymousAsync();
        Task<AnonymousResponse> AnonymousAsync(CancellationToken cancellationToken);
        Task<ICollection<AssetsResponse>> AssetsAll2Async(int? count, int? page, SortOrder? order);
        Task<ICollection<AssetsResponse>> AssetsAll2Async(int? count, int? page, SortOrder? order, CancellationToken cancellationToken);
        Task<ICollection<StakeAddressAddressesAssetsResponse>> AssetsAllAsync(string stake_address, int? count, int? page, SortOrder? order);
        Task<ICollection<StakeAddressAddressesAssetsResponse>> AssetsAllAsync(string stake_address, int? count, int? page, SortOrder? order, CancellationToken cancellationToken);
        Task<AssetResponse> AssetsAsync(string asset);
        Task<AssetResponse> AssetsAsync(string asset, CancellationToken cancellationToken);
        Task<ICollection<string>> BlocksAll2Async(int number, string pool_id, int? count, int? page, SortOrder? order);
        Task<ICollection<string>> BlocksAll2Async(int number, string pool_id, int? count, int? page, SortOrder? order, CancellationToken cancellationToken);
        Task<ICollection<string>> BlocksAll3Async(string pool_id, int? count, int? page, SortOrder? order);
        Task<ICollection<string>> BlocksAll3Async(string pool_id, int? count, int? page, SortOrder? order, CancellationToken cancellationToken);
        Task<ICollection<string>> BlocksAllAsync(int number, int? count, int? page, SortOrder? order);
        Task<ICollection<string>> BlocksAllAsync(int number, int? count, int? page, SortOrder? order, CancellationToken cancellationToken);
        Task<ICollection<TxMetadataLabelCBORResponse>> Cbor2Async(string label, int? count, int? page, SortOrder? order);
        Task<ICollection<TxMetadataLabelCBORResponse>> Cbor2Async(string label, int? count, int? page, SortOrder? order, CancellationToken cancellationToken);
        Task<ICollection<TxMetadataCbor>> CborAsync(string hash);
        Task<ICollection<TxMetadataCbor>> CborAsync(string hash, CancellationToken cancellationToken);
        Task<ClockResponse> GetClockAsync();
        Task<ICollection<StakeAddressDelegationsResponse>> Delegations2Async(string stake_address, int? count, int? page, SortOrder? order);
        Task<ICollection<StakeAddressDelegationsResponse>> Delegations2Async(string stake_address, int? count, int? page, SortOrder? order, CancellationToken cancellationToken);
        Task<ICollection<TxDelegation>> DelegationsAsync(string hash);
        Task<ICollection<TxDelegation>> DelegationsAsync(string hash, CancellationToken cancellationToken);
        Task<ICollection<PoolDelegatorResponse>> DelegatorsAsync(string pool_id, int? count, int? page, SortOrder? order);
        Task<ICollection<PoolDelegatorResponse>> DelegatorsAsync(string pool_id, int? count, int? page, SortOrder? order, CancellationToken cancellationToken);
        Task<ICollection<MetricsEndpointResponse>> EndpointsAsync();
        Task<ICollection<MetricsEndpointResponse>> EndpointsAsync(CancellationToken cancellationToken);
        Task<EpochContentResponse> EpochsAsync(int number);
        Task<EpochContentResponse> EpochsAsync(int number, CancellationToken cancellationToken);
        Task GatewayAsync(string iPFS_path);
        Task GatewayAsync(string iPFS_path, CancellationToken cancellationToken);
        Task<GenesisContentResponse> GenesisAsync();
        Task<GenesisContentResponse> GenesisAsync(CancellationToken cancellationToken);
        Task<BlockContentResponse> GetBlocksAsync(string hash_or_number);
        Task<BlockContentResponse> GetBlocksAsync(string hash_or_number, CancellationToken cancellationToken);
        Task<ClockResponse> GetClockAsync(CancellationToken cancellationToken);
        Task<HealthResponse> GetHealthAsync(CancellationToken cancellationToken);
        Task<BlockContentResponse> GetLatestBlockAsync();
        Task<BlockContentResponse> GetLatestBlockAsync(CancellationToken cancellationToken);
        Task<ICollection<BlockContentResponse>> GetNextBlockAsync(string hash_or_number, int? count, int? page);
        Task<ICollection<BlockContentResponse>> GetNextBlockAsync(string hash_or_number, int? count, int? page, CancellationToken cancellationToken);
        Task<BlockContentResponse> GetSlotAsync(int slot_number, CancellationToken cancellationToken);
        Task<BlockContentResponse> GetSlotAsync(int epoch_number, int slot_number);
        Task<BlockContentResponse> GetSlotAsync(int epoch_number, int slot_number, CancellationToken cancellationToken);
        Task<HealthResponse> GetHealthAsync();
        Task<ICollection<PoolHistoryResponse>> History2Async(string pool_id, int? count, int? page, SortOrder? order);
        Task<ICollection<PoolHistoryResponse>> History2Async(string pool_id, int? count, int? page, SortOrder? order, CancellationToken cancellationToken);
        Task<ICollection<AssetHistoryResponse>> History3Async(string asset, int? count, int? page, SortOrder? order);
        Task<ICollection<AssetHistoryResponse>> History3Async(string asset, int? count, int? page, SortOrder? order, CancellationToken cancellationToken);
        Task<ICollection<StakeAddressHistoryResponse>> HistoryAsync(string stake_address, int? count, int? page, SortOrder? order);
        Task<ICollection<StakeAddressHistoryResponse>> HistoryAsync(string stake_address, int? count, int? page, SortOrder? order, CancellationToken cancellationToken);
        Task<ICollection<TxMetadataLabelJsonResponse>> Labels2Async(string label, int? count, int? page, SortOrder? order);
        Task<ICollection<TxMetadataLabelJsonResponse>> Labels2Async(string label, int? count, int? page, SortOrder? order, CancellationToken cancellationToken);
        Task<ICollection<TxMetadataLabelResponse>> LabelsAsync(int? count, int? page, SortOrder? order);
        Task<ICollection<TxMetadataLabelResponse>> LabelsAsync(int? count, int? page, SortOrder? order, CancellationToken cancellationToken);
        Task<EpochContentResponse> Latest2Async();
        Task<EpochContentResponse> Latest2Async(CancellationToken cancellationToken);
        Task<ICollection<Anonymous32>> ListAllAsync(int? count, int? page, SortOrder? order);
        Task<ICollection<Anonymous32>> ListAllAsync(int? count, int? page, SortOrder? order, CancellationToken cancellationToken);
        Task<IpfsPinListResponse> ListAsync(string iPFS_path);
        Task<IpfsPinListResponse> ListAsync(string iPFS_path, CancellationToken cancellationToken);
        Task<ICollection<TxMetadata>> MetadataAllAsync(string hash);
        Task<ICollection<TxMetadata>> MetadataAllAsync(string hash, CancellationToken cancellationToken);
        Task<PoolMetadataResponse> MetadataAsync(string pool_id);
        Task<PoolMetadataResponse> MetadataAsync(string pool_id, CancellationToken cancellationToken);
        Task<ICollection<MetricResponse>> GetMetricsAsync();
        Task<ICollection<MetricResponse>> MetricsAsync(CancellationToken cancellationToken);
        Task<ICollection<StakeAddressMirsResponse>> Mirs2Async(string stake_address, int? count, int? page, SortOrder? order);
        Task<ICollection<StakeAddressMirsResponse>> Mirs2Async(string stake_address, int? count, int? page, SortOrder? order, CancellationToken cancellationToken);
        Task<ICollection<TxMir>> MirsAsync(string hash);
        Task<ICollection<TxMir>> MirsAsync(string hash, CancellationToken cancellationToken);
        Task<Network> NetworkAsync();
        Task<Network> NetworkAsync(CancellationToken cancellationToken);
        Task<ICollection<EpochContentResponse>> Next2Async(int number, int? count, int? page);
        Task<ICollection<EpochContentResponse>> Next2Async(int number, int? count, int? page, CancellationToken cancellationToken);
        Task<NutlinkAddress> NutlinkAsync(string address);
        Task<NutlinkAddress> NutlinkAsync(string address, CancellationToken cancellationToken);
        Task<EpochParamContent> Parameters2Async(int number);
        Task<EpochParamContent> Parameters2Async(int number, CancellationToken cancellationToken);
        Task<EpochParamContent> ParametersAsync();
        Task<EpochParamContent> ParametersAsync(CancellationToken cancellationToken);
        Task<ICollection<AssetPolicyResponse>> PolicyAsync(string policy_id, int? count, int? page, SortOrder? order);
        Task<ICollection<AssetPolicyResponse>> PolicyAsync(string policy_id, int? count, int? page, SortOrder? order, CancellationToken cancellationToken);
        Task<ICollection<string>> PoolsAllAsync(int? count, int? page, SortOrder? order);
        Task<ICollection<string>> PoolsAllAsync(int? count, int? page, SortOrder? order, CancellationToken cancellationToken);
        Task<Pool> PoolsAsync(string pool_id);
        Task<Pool> PoolsAsync(string pool_id, CancellationToken cancellationToken);
        Task<ICollection<EpochContentResponse>> Previous2Async(int number, int? count, int? page);
        Task<ICollection<EpochContentResponse>> Previous2Async(int number, int? count, int? page, CancellationToken cancellationToken);
        Task<ICollection<BlockContentResponse>> PreviousAsync(string hash_or_number, int? count, int? page);
        Task<ICollection<BlockContentResponse>> PreviousAsync(string hash_or_number, int? count, int? page, CancellationToken cancellationToken);
        Task<ICollection<StakeAddressRegistrationsResponse>> RegistrationsAsync(string stake_address, int? count, int? page, SortOrder? order);
        Task<ICollection<StakeAddressRegistrationsResponse>> RegistrationsAsync(string stake_address, int? count, int? page, SortOrder? order, CancellationToken cancellationToken);
        Task<ICollection<PoolRelayResponse>> RelaysAsync(string pool_id);
        Task<ICollection<PoolRelayResponse>> RelaysAsync(string pool_id, CancellationToken cancellationToken);
        Task<IpfsPinRemoveResponse> RemoveAsync(string iPFS_path);
        Task<IpfsPinRemoveResponse> RemoveAsync(string iPFS_path, CancellationToken cancellationToken);
        Task<ICollection<RetiredResponse>> RetiredAsync(int? count, int? page, SortOrder? order);
        Task<ICollection<RetiredResponse>> RetiredAsync(int? count, int? page, SortOrder? order, CancellationToken cancellationToken);
        Task<ICollection<RetiredResponse>> RetiringAsync(int? count, int? page, SortOrder? order);
        Task<ICollection<RetiredResponse>> RetiringAsync(int? count, int? page, SortOrder? order, CancellationToken cancellationToken);
        Task<ICollection<Anonymous9>> RewardsAsync(string stake_address, int? count, int? page, SortOrder? order);
        Task<ICollection<Anonymous9>> RewardsAsync(string stake_address, int? count, int? page, SortOrder? order, CancellationToken cancellationToken);
        Task<BlockContentResponse> SlotAsync(int slot_number);
        Task<ICollection<Anonymous2>> Stakes2Async(int number, string pool_id, int? count, int? page);
        Task<ICollection<Anonymous2>> Stakes2Async(int number, string pool_id, int? count, int? page, CancellationToken cancellationToken);
        Task<ICollection<TxStakeAddress>> Stakes3Async(string hash);
        Task<ICollection<TxStakeAddress>> Stakes3Async(string hash, CancellationToken cancellationToken);
        Task<ICollection<Anonymous>> StakesAsync(int number, int? count, int? page);
        Task<ICollection<Anonymous>> StakesAsync(int number, int? count, int? page, CancellationToken cancellationToken);
        Task<string> SubmitAsync(ContentType content_Type);
        Task<string> SubmitAsync(ContentType content_Type, CancellationToken cancellationToken);
        Task<ICollection<NutlinkAddressTickerResponse>> Tickers2Async(string address, string ticker, int? count, int? page, SortOrder? order);
        Task<ICollection<NutlinkAddressTickerResponse>> Tickers2Async(string address, string ticker, int? count, int? page, SortOrder? order, CancellationToken cancellationToken);
        Task<ICollection<NutlinkTickersTickerResponse>> Tickers3Async(string ticker, int? count, int? page, SortOrder? order);
        Task<ICollection<NutlinkTickersTickerResponse>> Tickers3Async(string ticker, int? count, int? page, SortOrder? order, CancellationToken cancellationToken);
        Task<ICollection<NutlinkAddressTickersResponse>> TickersAsync(string address, int? count, int? page, SortOrder? order);
        Task<ICollection<NutlinkAddressTickersResponse>> TickersAsync(string address, int? count, int? page, SortOrder? order, CancellationToken cancellationToken);
        Task<AddressContentTotal> TotalAsync(string address);
        Task<AddressContentTotal> TotalAsync(string address, CancellationToken cancellationToken);
        Task<ICollection<AssetTransactionResponse>> Transactions2Async(string asset, int? count, int? page, SortOrder? order);
        Task<ICollection<AssetTransactionResponse>> Transactions2Async(string asset, int? count, int? page, SortOrder? order, CancellationToken cancellationToken);
        Task<ICollection<AddressTransactionResponse>> TransactionsAsync(string address, int? count, int? page, SortOrder? order, string from, string to);
        Task<ICollection<AddressTransactionResponse>> TransactionsAsync(string address, int? count, int? page, SortOrder? order, string from, string to, CancellationToken cancellationToken);
        Task<ICollection<string>> TxsAll2Async(string hash_or_number, int? count, int? page, SortOrder? order);
        Task<ICollection<string>> TxsAll2Async(string hash_or_number, int? count, int? page, SortOrder? order, CancellationToken cancellationToken);
        Task<ICollection<string>> TxsAll3Async(string address, int? count, int? page, SortOrder? order);
        Task<ICollection<string>> TxsAll3Async(string address, int? count, int? page, SortOrder? order, CancellationToken cancellationToken);
        Task<ICollection<string>> TxsAll4Async(string asset, int? count, int? page, SortOrder? order);
        Task<ICollection<string>> TxsAll4Async(string asset, int? count, int? page, SortOrder? order, CancellationToken cancellationToken);
        Task<ICollection<string>> TxsAllAsync(int? count, int? page, SortOrder? order);
        Task<ICollection<string>> TxsAllAsync(int? count, int? page, SortOrder? order, CancellationToken cancellationToken);
        Task<TxContent> TxsAsync(string hash);
        Task<TxContent> TxsAsync(string hash, CancellationToken cancellationToken);
        Task<ICollection<PoolUpdateResponse>> UpdatesAsync(string pool_id, int? count, int? page, SortOrder? order);
        Task<ICollection<PoolUpdateResponse>> UpdatesAsync(string pool_id, int? count, int? page, SortOrder? order, CancellationToken cancellationToken);
        Task<ICollection<AddressUTxOResponse>> UtxosAllAsync(string address, int? count, int? page, SortOrder? order);
        Task<ICollection<AddressUTxOResponse>> UtxosAllAsync(string address, int? count, int? page, SortOrder? order, CancellationToken cancellationToken);
        Task<TxContentUtxo> UtxosAsync(string hash);
        Task<TxContentUtxo> UtxosAsync(string hash, CancellationToken cancellationToken);
        Task<ICollection<StakeAddressWithdrawalsResponse>> Withdrawals2Async(string stake_address, int? count, int? page, SortOrder? order);
        Task<ICollection<StakeAddressWithdrawalsResponse>> Withdrawals2Async(string stake_address, int? count, int? page, SortOrder? order, CancellationToken cancellationToken);
        Task<ICollection<TxWithdawal>> WithdrawalsAsync(string hash);
        Task<ICollection<TxWithdawal>> WithdrawalsAsync(string hash, CancellationToken cancellationToken);
    }
}